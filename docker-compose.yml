version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment: &backend-env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - db
      - redis
      - jaeger
    volumes:
      - ./backend:/app
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging: *default-logging

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MAX_CONNECTIONS=500
      - SHARED_BUFFERS=1GB
      - EFFECTIVE_CACHE_SIZE=3GB
      - WORK_MEM=16MB
      - MAINTENANCE_WORK_MEM=256MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging

  db_replica:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    command: |
      postgres
      -c hot_standby=on
      -c max_standby_streaming_delay=30s
      -c wal_receiver_status_interval=10s
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - school_net
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    logging: *default-logging

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging

  redis_replica:
    image: redis:7-alpine
    command: redis-server --slaveof redis 6379 --appendonly yes
    networks:
      - school_net
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging: *default-logging

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker worker --loglevel=info --concurrency=8
    environment: *backend-env
    depends_on:
      - backend
      - redis
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    logging: *default-logging

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker beat --loglevel=info
    environment: *backend-env
    depends_on:
      - backend
      - redis
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    logging: *default-logging

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.worker flower --port=5555
    ports:
      - "5555:5555"
    environment: *backend-env
    depends_on:
      - backend
      - redis
      - celery_worker
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    logging: *default-logging

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging: *default-logging

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - school_net
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging: *default-logging

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging: *default-logging

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - school_net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 512M
    logging: *default-logging

volumes:
  postgres_data:
  postgres_replica_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  school_net:
    driver: bridge